revoke delete on table "public"."employees" from "anon";

revoke insert on table "public"."employees" from "anon";

revoke references on table "public"."employees" from "anon";

revoke select on table "public"."employees" from "anon";

revoke trigger on table "public"."employees" from "anon";

revoke truncate on table "public"."employees" from "anon";

revoke update on table "public"."employees" from "anon";

revoke delete on table "public"."employees" from "authenticated";

revoke insert on table "public"."employees" from "authenticated";

revoke references on table "public"."employees" from "authenticated";

revoke select on table "public"."employees" from "authenticated";

revoke trigger on table "public"."employees" from "authenticated";

revoke truncate on table "public"."employees" from "authenticated";

revoke update on table "public"."employees" from "authenticated";

revoke delete on table "public"."employees" from "service_role";

revoke insert on table "public"."employees" from "service_role";

revoke references on table "public"."employees" from "service_role";

revoke select on table "public"."employees" from "service_role";

revoke trigger on table "public"."employees" from "service_role";

revoke truncate on table "public"."employees" from "service_role";

revoke update on table "public"."employees" from "service_role";

alter table "public"."employees" drop constraint "employees_pkey";

drop index if exists "public"."employees_pkey";

drop table "public"."employees";

create table "public"."monthly_income" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "date" timestamp with time zone
);


alter table "public"."monthly_income" enable row level security;

create table "public"."raw_transactions" (
    "id" bigint generated by default as identity not null,
    "description" text,
    "amount" numeric,
    "transaction_date" timestamp with time zone,
    "posting_date" timestamp with time zone,
    "reference_number" text,
    "created_at" timestamp with time zone not null default now(),
    "isPaid" boolean default false,
    "category" text default 'None'::text
);


alter table "public"."raw_transactions" enable row level security;

CREATE UNIQUE INDEX monthly_income_pkey ON public.monthly_income USING btree (id);

CREATE UNIQUE INDEX raw_transactions_pkey ON public.raw_transactions USING btree (id);

CREATE UNIQUE INDEX raw_transactions_reference_number_key ON public.raw_transactions USING btree (reference_number);

alter table "public"."monthly_income" add constraint "monthly_income_pkey" PRIMARY KEY using index "monthly_income_pkey";

alter table "public"."raw_transactions" add constraint "raw_transactions_pkey" PRIMARY KEY using index "raw_transactions_pkey";

alter table "public"."raw_transactions" add constraint "raw_transactions_reference_number_key" UNIQUE using index "raw_transactions_reference_number_key";

grant delete on table "public"."monthly_income" to "anon";

grant insert on table "public"."monthly_income" to "anon";

grant references on table "public"."monthly_income" to "anon";

grant select on table "public"."monthly_income" to "anon";

grant trigger on table "public"."monthly_income" to "anon";

grant truncate on table "public"."monthly_income" to "anon";

grant update on table "public"."monthly_income" to "anon";

grant delete on table "public"."monthly_income" to "authenticated";

grant insert on table "public"."monthly_income" to "authenticated";

grant references on table "public"."monthly_income" to "authenticated";

grant select on table "public"."monthly_income" to "authenticated";

grant trigger on table "public"."monthly_income" to "authenticated";

grant truncate on table "public"."monthly_income" to "authenticated";

grant update on table "public"."monthly_income" to "authenticated";

grant delete on table "public"."monthly_income" to "service_role";

grant insert on table "public"."monthly_income" to "service_role";

grant references on table "public"."monthly_income" to "service_role";

grant select on table "public"."monthly_income" to "service_role";

grant trigger on table "public"."monthly_income" to "service_role";

grant truncate on table "public"."monthly_income" to "service_role";

grant update on table "public"."monthly_income" to "service_role";

grant delete on table "public"."raw_transactions" to "anon";

grant insert on table "public"."raw_transactions" to "anon";

grant references on table "public"."raw_transactions" to "anon";

grant select on table "public"."raw_transactions" to "anon";

grant trigger on table "public"."raw_transactions" to "anon";

grant truncate on table "public"."raw_transactions" to "anon";

grant update on table "public"."raw_transactions" to "anon";

grant delete on table "public"."raw_transactions" to "authenticated";

grant insert on table "public"."raw_transactions" to "authenticated";

grant references on table "public"."raw_transactions" to "authenticated";

grant select on table "public"."raw_transactions" to "authenticated";

grant trigger on table "public"."raw_transactions" to "authenticated";

grant truncate on table "public"."raw_transactions" to "authenticated";

grant update on table "public"."raw_transactions" to "authenticated";

grant delete on table "public"."raw_transactions" to "service_role";

grant insert on table "public"."raw_transactions" to "service_role";

grant references on table "public"."raw_transactions" to "service_role";

grant select on table "public"."raw_transactions" to "service_role";

grant trigger on table "public"."raw_transactions" to "service_role";

grant truncate on table "public"."raw_transactions" to "service_role";

grant update on table "public"."raw_transactions" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."raw_transactions"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."raw_transactions"
as permissive
for select
to public
using (true);


create policy "Enable update access for all users"
on "public"."raw_transactions"
as permissive
for update
to public
using (true);



